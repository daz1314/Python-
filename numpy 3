3.3 NumPy库的随机数函数
NumPy的随机数函数子库

NumPy的random子库

np.random.*

np.random.rand()

np.random.randn()

np.random.randint()

np.random的随机数函数（1）

rand(d0, d1, ..., dn):根据d0-dn创建随机数数组，浮点数，[0, 1),均匀分布

randn(d0, d1, ..., dn):根据d0-dn创建随机数数组，标准正态分布

randint(low[, high, shape]):根据shape创建随机整数或者整数数组，范围是[low, high)

seed(s):随机数种子，s 是给定的种子值

In [1]:
import numpy as np
In [2]:
a = np.random.rand(3, 4, 5)
In [3]:
a
Out[3]:
array([[[ 0.54268383,  0.45636441,  0.55216183,  0.00677474,  0.85378184],
        [ 0.68942057,  0.28135362,  0.43852878,  0.49750652,  0.24929299],
        [ 0.38023179,  0.22523182,  0.81224211,  0.1607875 ,  0.02405372],
        [ 0.44125996,  0.984307  ,  0.21051172,  0.35814274,  0.01737782]],

       [[ 0.72939333,  0.65071726,  0.71701253,  0.0934061 ,  0.25559019],
        [ 0.81740826,  0.18353202,  0.13698286,  0.67742257,  0.83015481],
        [ 0.48106112,  0.98051726,  0.7086606 ,  0.9516989 ,  0.84706462],
        [ 0.47935901,  0.0024182 ,  0.20447207,  0.77743375,  0.79215365]],

       [[ 0.33454265,  0.48045088,  0.16653018,  0.3539366 ,  0.31875405],
        [ 0.15068528,  0.36470399,  0.49627197,  0.22883737,  0.69243761],
        [ 0.37396132,  0.19696472,  0.51876052,  0.1623553 ,  0.26679332],
        [ 0.75336494,  0.66274902,  0.53917193,  0.82667437,  0.67031931]]])
In [4]:
sn = np.random.randn(3, 4, 5)
In [5]:
sn
Out[5]:
array([[[ 0.72187659, -0.28399639, -1.24135146,  0.71658891, -0.69800337],
        [ 0.13607778,  1.42466198,  0.81968089, -0.49949912,  0.6040641 ],
        [ 2.37715894, -1.40409529,  1.04905544, -0.75479864,  2.80391155],
        [-1.49858992, -1.10418571,  0.53711142, -1.23944002,  0.35408957]],

       [[ 0.63706838,  0.94663305, -0.77923883, -0.12029097,  0.55423744],
        [-0.01995607, -0.15522958, -0.36440357,  0.62446577,  0.07864264],
        [ 1.01006665, -1.03142202,  0.65694976, -0.32638007,  0.0467994 ],
        [-0.25042045, -0.31817753,  0.84889938,  0.00623496,  0.14380269]],

       [[-0.90513124,  0.42026384,  1.23567008,  1.81795533, -1.6449552 ],
        [ 0.40817376,  0.97352167, -0.35397829,  0.95950088,  0.1986656 ],
        [-0.25646277, -0.80709675,  1.37999246, -1.06468071, -1.83253669],
        [ 0.38169995,  1.42463112,  0.90016189,  0.23951165,  0.51980415]]])
sn为符合正态分布的随机数数组

In [6]:
b = np.random.randint(100, 200, (3, 4))
In [7]:
b
Out[7]:
array([[106, 175, 194, 169],
       [145, 122, 127, 187],
       [173, 172, 173, 186]])
b 为100至200之间符合（3， 4）分布的随机数数组

In [8]:
np.random.seed(10)
In [9]:
np.random.randint(100, 200, (3, 4))
Out[9]:
array([[109, 115, 164, 128],
       [189, 193, 129, 108],
       [173, 100, 140, 136]])
In [10]:
np.random.seed(10)
In [11]:
np.random.randint(100, 200, (3, 4))
Out[11]:
array([[109, 115, 164, 128],
       [189, 193, 129, 108],
       [173, 100, 140, 136]])
运行seed之后，产生指定的随机数，前后两个数组相同

np.random的随机数函数（2）

shuffle(a):根据数组a的第0轴进行随机排列，改变数组a

permutation(a):根据数组a的第0轴产生一个新的乱序数组，不改变数组a

choice(a[, size, replace, p])：从一维数组a中以概率p抽取元素，形成size形状新数组。replace表示是否可以重用元素，默认为True

In [13]:
a = np.random.randint(100, 200, (3, 4))
In [14]:
a
Out[14]:
array([[116, 111, 154, 188],
       [162, 133, 172, 178],
       [149, 151, 154, 177]])
In [15]:
np.random.shuffle(a)
In [16]:
a
Out[16]:
array([[116, 111, 154, 188],
       [149, 151, 154, 177],
       [162, 133, 172, 178]])
In [17]:
np.random.shuffle(a)
In [18]:
a
Out[18]:
array([[162, 133, 172, 178],
       [116, 111, 154, 188],
       [149, 151, 154, 177]])
In [19]:
np.random.permutation(a)
Out[19]:
array([[149, 151, 154, 177],
       [162, 133, 172, 178],
       [116, 111, 154, 188]])
In [20]:
a
Out[20]:
array([[162, 133, 172, 178],
       [116, 111, 154, 188],
       [149, 151, 154, 177]])
可以看到，使用shuffle改变了原来的数组a,使用permutation不改变原数组a

In [28]:
b = np.random.randint(100, 200, (8,))
In [30]:
b
Out[30]:
array([146, 107, 175, 128, 133, 184, 196, 188])
In [32]:
np.random.choice(b, (3, 2))
Out[32]:
array([[175, 133],
       [196, 175],
       [146, 188]])
In [33]:
np.random.choice(b, (3, 2), replace = False)
Out[33]:
array([[107, 128],
       [196, 133],
       [175, 188]])
如果不指定replace,数组每次选取会等概率重新选，会出现重复项

将replace指定为False后，不出现重复项了

In [37]:
np.random.choice(b, (3, 2), p = b/np.sum(b))
Out[37]:
array([[175, 146],
       [184, 175],
       [184, 133]])
定义p后，大的数出现的概率大

np.random的随机数函数（3）

uniform（low， high， size）：产生具有随机分布的数组，low起始值，high结束值，size形状

normal(loc, scale, size)：产生具有正态分布的数组，loc为均值，scale为标准差，size为形状

poisson(lam, size)：产生具有泊松分布的数组，lam随机事件发生率，size形状

In [38]:
u = np.random.uniform(0, 10, (3, 4))
In [39]:
u
Out[39]:
array([[  3.50958224e+00,   7.05331613e+00,   8.20703741e+00,
          1.34563003e+00],
       [  6.04726160e+00,   2.83148276e+00,   5.06407820e+00,
          3.84604283e-01],
       [  3.32444096e+00,   2.72531491e-03,   6.64655466e+00,
          3.77440665e+00]])
In [40]:
n = np.random.normal(10, 5, (3, 4))
In [41]:
n
Out[41]:
array([[  6.96352757,  12.09161148,  14.93278376,   8.49320482],
       [  9.91183261,  12.99558049,   8.48697357,   6.27267071],
       [  9.35738512,  16.23995754,  15.3113007 ,   1.8568331 ]])
